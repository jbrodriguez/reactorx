"use strict";

var csp = require("./csp");
var chan = csp.chan;
var go = csp.go;
var put = csp.put;
var take = csp.take;

var mocha = require("mocha");
var it = mocha.it;

function identity_chan(x) {
  var ch = chan(1);
  go(regeneratorRuntime.mark(function callee$1$0() {
    return regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) {
        switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return put(ch, x);
          case 2:
            ch.close();
          case 3:
          case "end":
            return context$2$0.stop();
        }
      }
    }, callee$1$0, this);
  }));
  return ch;
}

function check(f, done) {
  return (function () {
    try {
      f();
      done();
    } catch (e) {
      done(e);
    }
  })();
}

// it("", g(function*() {
// }));
function g(f) {
  return function (done) {
    go(f, [done]);
  };
};

function gg(f) {
  return g(regeneratorRuntime.mark(function callee$1$0(done) {
    var ch;

    return regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) {
        switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            ch = go(f, []);
            context$2$0.next = 4;
            return take(ch);
          case 4:
            done();
            context$2$0.next = 10;
            break;
          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0["catch"](0);
            done(context$2$0.t0);
          case 10:
          case "end":
            return context$2$0.stop();
        }
      }
    }, callee$1$0, this, [[0, 7]]);
  }));
}

module.exports = {
  identity_chan: identity_chan,
  check: check,
  goAsync: g,
  go: gg,

  // f must be a generator function. For now assertions should be inside f's
  // top-level, not functions f may call (that works but a failing test
  // may break following tests).
  it: function it(desc, f) {
    return mocha.it(desc, gg(f));
  },

  beforeEach: function beforeEach(f) {
    return mocha.beforeEach(gg(f));
  },

  afterEach: function afterEach(f) {
    return mocha.afterEach(gg(f));
  },

  before: function before(f) {
    return mocha.before(gg(f));
  },

  after: function after(f) {
    return mocha.after(gg(f));
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy1jc3AvY3NwLnRlc3QtaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDcEIsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztBQUNoQixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0FBQ2xCLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7O0FBRXBCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDOztBQUVsQixTQUFTLGFBQWEsQ0FBQyxDQUFDLEVBQUU7QUFDeEIsTUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLElBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxVQUFVLEdBQUc7QUFDL0MsV0FBTyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxXQUFXLENBQUMsV0FBVyxFQUFFO0FBQy9ELGFBQU8sQ0FBQztBQUFFLGdCQUFRLFdBQVcsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUk7QUFDckQsZUFBSyxDQUFDO0FBQ0osdUJBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLG1CQUFPLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFBQSxBQUNwQixlQUFLLENBQUM7QUFDSixjQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFBQSxBQUNiLGVBQUssQ0FBQyxDQUFDO0FBQ1AsZUFBSyxLQUFLO0FBQ1IsbUJBQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQUEsU0FDM0I7T0FBQTtLQUNGLEVB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LE9BQUssRUFBRSxlQUFTLENBQUMsRUFBRTtBQUNqQixXQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDM0I7Q0FDRixDQUFDIiwiZmlsZSI6ImNzcC50ZXN0LWhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNzcCA9IHJlcXVpcmUoXCIuL2NzcFwiKTtcbnZhciBjaGFuID0gY3NwLmNoYW47XG52YXIgZ28gPSBjc3AuZ287XG52YXIgcHV0ID0gY3NwLnB1dDtcbnZhciB0YWtlID0gY3NwLnRha2U7XG5cbnZhciBtb2NoYSA9IHJlcXVpcmUoXCJtb2NoYVwiKTtcbnZhciBpdCA9IG1vY2hhLml0O1xuXG5mdW5jdGlvbiBpZGVudGl0eV9jaGFuKHgpIHtcbiAgdmFyIGNoID0gY2hhbigxKTtcbiAgZ28ocmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gY2FsbGVlJDEkMCgpIHtcbiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gY2FsbGVlJDEkMCQoY29udGV4dCQyJDApIHtcbiAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKGNvbnRleHQkMiQwLnByZXYgPSBjb250ZXh0JDIkMC5uZXh0KSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGNvbnRleHQkMiQwLm5leHQgPSAyO1xuICAgICAgICByZXR1cm4gcHV0KGNoLCB4KTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgY2guY2xvc2UoKTtcbiAgICAgIGNhc2UgMzpcbiAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgcmV0dXJuIGNvbnRleHQkMiQwLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LCBjYWxsZWUkMSQwLCB0aGlzKTtcbiAgfSkpO1xuICByZXR1cm4gY2g7XG59XG5cbmZ1bmN0aW9uIGNoZWNrKGYsIGRvbmUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgZigpO1xuICAgICAgZG9uZSgpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgZG9uZShlKTtcbiAgICB9XG4gIH0pKCk7XG59XG5cbi8vIGl0KFwiXCIsIGcoZnVuY3Rpb24qKCkge1xuLy8gfSkpO1xuZnVuY3Rpb24gZyhmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkb25lKSB7XG4gICAgZ28oZiwgW2RvbmVdKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGdnKGYpIHtcbiAgcmV0dXJuIGcocmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gY2FsbGVlJDEkMChkb25lKSB7XG4gICAgdmFyIGNoO1xuXG4gICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIGNhbGxlZSQxJDAkKGNvbnRleHQkMiQwKSB7XG4gICAgICB3aGlsZSAoMSkgc3dpdGNoIChjb250ZXh0JDIkMC5wcmV2ID0gY29udGV4dCQyJDAubmV4dCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBjb250ZXh0JDIkMC5wcmV2ID0gMDtcbiAgICAgICAgY2ggPSBnbyhmLCBbXSk7XG4gICAgICAgIGNvbnRleHQkMiQwLm5leHQgPSA0O1xuICAgICAgICByZXR1cm4gdGFrZShjaCk7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGRvbmUoKTtcbiAgICAgICAgY29udGV4dCQyJDAubmV4dCA9IDEwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgY29udGV4dCQyJDAucHJldiA9IDc7XG4gICAgICAgIGNvbnRleHQkMiQwLnQwID0gY29udGV4dCQyJDBbXCJjYXRjaFwiXSgwKTtcbiAgICAgICAgZG9uZShjb250ZXh0JDIkMC50MCk7XG4gICAgICBjYXNlIDEwOlxuICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICByZXR1cm4gY29udGV4dCQyJDAuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sIGNhbGxlZSQxJDAsIHRoaXMsIFtbMCwgN11dKTtcbiAgfSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaWRlbnRpdHlfY2hhbjogaWRlbnRpdHlfY2hhbixcbiAgY2hlY2s6IGNoZWNrLFxuICBnb0FzeW5jOiBnLFxuICBnbzogZ2csXG5cbiAgLy8gZiBtdXN0IGJlIGEgZ2VuZXJhdG9yIGZ1bmN0aW9uLiBGb3Igbm93IGFzc2VydGlvbnMgc2hvdWxkIGJlIGluc2lkZSBmJ3NcbiAgLy8gdG9wLWxldmVsLCBub3QgZnVuY3Rpb25zIGYgbWF5IGNhbGwgKHRoYXQgd29ya3MgYnV0IGEgZmFpbGluZyB0ZXN0XG4gIC8vIG1heSBicmVhayBmb2xsb3dpbmcgdGVzdHMpLlxuICBpdDogZnVuY3Rpb24oZGVzYywgZikge1xuICAgIHJldHVybiBtb2NoYS5pdChkZXNjLCBnZyhmKSk7XG4gIH0sXG5cbiAgYmVmb3JlRWFjaDogZnVuY3Rpb24oZikge1xuICAgIHJldHVybiBtb2NoYS5iZWZvcmVFYWNoKGdnKGYpKTtcbiAgfSxcblxuICBhZnRlckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gbW9jaGEuYWZ0ZXJFYWNoKGdnKGYpKTtcbiAgfSxcblxuICBiZWZvcmU6IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gbW9jaGEuYmVmb3JlKGdnKGYpKTtcbiAgfSxcblxuICBhZnRlcjogZnVuY3Rpb24oZikge1xuICAgIHJldHVybiBtb2NoYS5hZnRlcihnZyhmKSk7XG4gIH1cbn07XG4iXX0=