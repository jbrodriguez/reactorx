"use strict";

var dispatch = require("./dispatch");
var select = require("./select");
var Channel = require("./channels").Channel;

var NO_VALUE = {};

var FnHandler = function FnHandler(blockable, f) {
  this.f = f;
  this.blockable = blockable;
};

FnHandler.prototype.is_active = function () {
  return true;
};

FnHandler.prototype.is_blockable = function () {
  return this.blockable;
};

FnHandler.prototype.commit = function () {
  return this.f;
};

function put_then_callback(channel, value, callback) {
  var result = channel._put(value, new FnHandler(true, callback));
  if (result && callback) {
    callback(result.value);
  }
}

function take_then_callback(channel, callback) {
  var result = channel._take(new FnHandler(true, callback));
  if (result) {
    callback(result.value);
  }
}

var Process = function Process(gen, onFinish, creator) {
  this.gen = gen;
  this.creatorFunc = creator;
  this.finished = false;
  this.onFinish = onFinish;
};

var Instruction = function Instruction(op, data) {
  this.op = op;
  this.data = data;
};

var TAKE = "take";
var PUT = "put";
var SLEEP = "sleep";
var ALTS = "alts";

// TODO FIX XXX: This is a (probably) temporary hack to avoid blowing
// up the stack, but it means double queueing when the value is not
// immediately available
Process.prototype._continue = function (response) {
  var self = this;
  dispatch.run(function () {
    self.run(response);
  });
};

Process.prototype._done = function (value) {
  if (!this.finished) {
    this.finished = true;
    var onFinish = this.onFinish;
    if (typeof onFinish === "function") {
      dispatch.run(function () {
        onFinish(value);
      });
    }
  }
};

Process.prototype.run = function (response) {
  if (this.finished) {
    return;
  }

  // TODO: Shouldn't we (optionally) stop error propagation here (and
  // signal the error through a channel or something)? Otherwise the
  // uncaught exception will crash some runtimes (e.g. Node)
  var iter = this.gen.next(response);
  if (iter.done) {
    this._done(iter.value);
    return;
  }

  var ins = iter.value;
  var self = this;

  if (ins instanceof Instruction) {
    switch (ins.op) {
      case PUT:
        var data = ins.data;
        put_then_callback(data.channel, data.value, function (ok) {
          self._continue(ok);
        });
        break;

      case TAKE:
        var channel = ins.data;
        take_then_callback(channel, function (value) {
          self._continue(value);
        });
        break;

      case SLEEP:
        var msecs = ins.data;
        dispatch.queue_delay(function () {
          self.run(null);
        }, msecs);
        break;

      case ALTS:
        select.do_alts(ins.data.operations, function (result) {
          self._continue(result);
        }, ins.data.options);
        break;
    }
  } else if (ins instanceof Channel) {
    var channel = ins;
    take_then_callback(channel, function (value) {
      self._continue(value);
    });
  } else {
    this._continue(ins);
  }
};

function take(channel) {
  return new Instruction(TAKE, channel);
}

function put(channel, value) {
  return new Instruction(PUT, {
    channel: channel,
    value: value
  });
}

function poll(channel) {
  if (channel.closed) {
    return NO_VALUE;
  }

  var result = channel._take(new FnHandler(false));
  if (result) {
    return result.value;
  } else {
    return NO_VALUE;
  }
}

function offer(channel, value) {
  if (channel.closed) {
    return false;
  }

  var result = channel._put(value, new FnHandler(false));
  if (result) {
    return true;
  } else {
    return false;
  }
}

function sleep(msecs) {
  return new Instruction(SLEEP, msecs);
}

function alts(operations, options) {
  return new Instruction(ALTS, {
    operations: operations,
    options: options
  });
}

exports.put_then_callback = put_then_callback;
exports.take_then_callback = take_then_callback;
exports.put = put;
exports.take = take;
exports.offer = offer;
exports.poll = poll;
exports.sleep = sleep;
exports.alts = alts;
exports.Instruction = Instruction;
exports.Process = Process;
exports.NO_VALUE = NO_VALUE;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy1jc3AvaW1wbC9wcm9jZXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUM7O0FBRTVDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFbEIsSUFBSSxTQUFTLEdBQUcsU0FBWixTQUFTLENBQVksU0FBUyxFQUFFLENBQUMsRUFBRTtBQUNyQyxNQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLE1BQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0NBQzVCLENBQUM7O0FBRUYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBVztBQUN6QyxTQUFPLElBQUksQ0FBQztDQUNiLENBQUM7O0FBRUYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBVztBQUM1QyxTQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7Q0FDdkIsQ0FBQzs7QUFFRixTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxZQUFXO0FBQ3RDLFNBQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztDQUNmLENBQUM7O0FBRUYsU0FBUyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUNuRCxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNoRSxNQUFJLE1BQU0sSUFBSSxRQUFRLEVBQUU7QUFDdEIsWUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUN4QjtDQUNGOztBQUVELFNBQVMs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R0FBRyxHQUFHLENBQUM7QUFDbEIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDcEIsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDdEIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDcEIsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDdEIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDcEIsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDbEMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDMUIsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJmaWxlIjoicHJvY2Vzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZGlzcGF0Y2ggPSByZXF1aXJlKFwiLi9kaXNwYXRjaFwiKTtcbnZhciBzZWxlY3QgPSByZXF1aXJlKFwiLi9zZWxlY3RcIik7XG52YXIgQ2hhbm5lbCA9IHJlcXVpcmUoXCIuL2NoYW5uZWxzXCIpLkNoYW5uZWw7XG5cbnZhciBOT19WQUxVRSA9IHt9O1xuXG52YXIgRm5IYW5kbGVyID0gZnVuY3Rpb24oYmxvY2thYmxlLCBmKSB7XG4gIHRoaXMuZiA9IGY7XG4gIHRoaXMuYmxvY2thYmxlID0gYmxvY2thYmxlO1xufTtcblxuRm5IYW5kbGVyLnByb3RvdHlwZS5pc19hY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5GbkhhbmRsZXIucHJvdG90eXBlLmlzX2Jsb2NrYWJsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5ibG9ja2FibGU7XG59O1xuXG5GbkhhbmRsZXIucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mO1xufTtcblxuZnVuY3Rpb24gcHV0X3RoZW5fY2FsbGJhY2soY2hhbm5lbCwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBjaGFubmVsLl9wdXQodmFsdWUsIG5ldyBGbkhhbmRsZXIodHJ1ZSwgY2FsbGJhY2spKTtcbiAgaWYgKHJlc3VsdCAmJiBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrKHJlc3VsdC52YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFrZV90aGVuX2NhbGxiYWNrKGNoYW5uZWwsIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBjaGFubmVsLl90YWtlKG5ldyBGbkhhbmRsZXIodHJ1ZSwgY2FsbGJhY2spKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGNhbGxiYWNrKHJlc3VsdC52YWx1ZSk7XG4gIH1cbn1cblxudmFyIFByb2Nlc3MgPSBmdW5jdGlvbihnZW4sIG9uRmluaXNoLCBjcmVhdG9yKSB7XG4gIHRoaXMuZ2VuID0gZ2VuO1xuICB0aGlzLmNyZWF0b3JGdW5jID0gY3JlYXRvcjtcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICB0aGlzLm9uRmluaXNoID0gb25GaW5pc2g7XG59O1xuXG52YXIgSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihvcCwgZGF0YSkge1xuICB0aGlzLm9wID0gb3A7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG59O1xuXG52YXIgVEFLRSA9IFwidGFrZVwiO1xudmFyIFBVVCA9IFwicHV0XCI7XG52YXIgU0xFRVAgPSBcInNsZWVwXCI7XG52YXIgQUxUUyA9IFwiYWx0c1wiO1xuXG4vLyBUT0RPIEZJWCBYWFg6IFRoaXMgaXMgYSAocHJvYmFibHkpIHRlbXBvcmFyeSBoYWNrIHRvIGF2b2lkIGJsb3dpbmdcbi8vIHVwIHRoZSBzdGFjaywgYnV0IGl0IG1lYW5zIGRvdWJsZSBxdWV1ZWluZyB3aGVuIHRoZSB2YWx1ZSBpcyBub3Rcbi8vIGltbWVkaWF0ZWx5IGF2YWlsYWJsZVxuUHJvY2Vzcy5wcm90b3R5cGUuX2NvbnRpbnVlID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkaXNwYXRjaC5ydW4oZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5ydW4ocmVzcG9uc2UpO1xuICB9KTtcbn07XG5cblByb2Nlc3MucHJvdG90eXBlLl9kb25lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCF0aGlzLmZpbmlzaGVkKSB7XG4gICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgdmFyIG9uRmluaXNoID0gdGhpcy5vbkZpbmlzaDtcbiAgICBpZiAodHlwZW9mIG9uRmluaXNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGRpc3BhdGNoLnJ1bihmdW5jdGlvbigpIHtcbiAgICAgICAgb25GaW5pc2godmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuXG5Qcm9jZXNzLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICBpZiAodGhpcy5maW5pc2hlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRPRE86IFNob3VsZG4ndCB3ZSAob3B0aW9uYWxseSkgc3RvcCBlcnJvciBwcm9wYWdhdGlvbiBoZXJlIChhbmRcbiAgLy8gc2lnbmFsIHRoZSBlcnJvciB0aHJvdWdoIGEgY2hhbm5lbCBvciBzb21ldGhpbmcpPyBPdGhlcndpc2UgdGhlXG4gIC8vIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3aWxsIGNyYXNoIHNvbWUgcnVudGltZXMgKGUuZy4gTm9kZSlcbiAgdmFyIGl0ZXIgPSB0aGlzLmdlbi5uZXh0KHJlc3BvbnNlKTtcbiAgaWYgKGl0ZXIuZG9uZSkge1xuICAgIHRoaXMuX2RvbmUoaXRlci52YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGlucyA9IGl0ZXIudmFsdWU7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoaW5zIGluc3RhbmNlb2YgSW5zdHJ1Y3Rpb24pIHtcbiAgICBzd2l0Y2ggKGlucy5vcCkge1xuICAgIGNhc2UgUFVUOlxuICAgICAgdmFyIGRhdGEgPSBpbnMuZGF0YTtcbiAgICAgIHB1dF90aGVuX2NhbGxiYWNrKGRhdGEuY2hhbm5lbCwgZGF0YS52YWx1ZSwgZnVuY3Rpb24ob2spIHtcbiAgICAgICAgc2VsZi5fY29udGludWUob2spO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgVEFLRTpcbiAgICAgIHZhciBjaGFubmVsID0gaW5zLmRhdGE7XG4gICAgICB0YWtlX3RoZW5fY2FsbGJhY2soY2hhbm5lbCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgc2VsZi5fY29udGludWUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgU0xFRVA6XG4gICAgICB2YXIgbXNlY3MgPSBpbnMuZGF0YTtcbiAgICAgIGRpc3BhdGNoLnF1ZXVlX2RlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnJ1bihudWxsKTtcbiAgICAgIH0sIG1zZWNzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBBTFRTOlxuICAgICAgc2VsZWN0LmRvX2FsdHMoaW5zLmRhdGEub3BlcmF0aW9ucywgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIHNlbGYuX2NvbnRpbnVlKHJlc3VsdCk7XG4gICAgICB9LCBpbnMuZGF0YS5vcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmKGlucyBpbnN0YW5jZW9mIENoYW5uZWwpIHtcbiAgICB2YXIgY2hhbm5lbCA9IGlucztcbiAgICB0YWtlX3RoZW5fY2FsbGJhY2soY2hhbm5lbCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHNlbGYuX2NvbnRpbnVlKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLl9jb250aW51ZShpbnMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB0YWtlKGNoYW5uZWwpIHtcbiAgcmV0dXJuIG5ldyBJbnN0cnVjdGlvbihUQUtFLCBjaGFubmVsKTtcbn1cblxuZnVuY3Rpb24gcHV0KGNoYW5uZWwsIHZhbHVlKSB7XG4gIHJldHVybiBuZXcgSW5zdHJ1Y3Rpb24oUFVULCB7XG4gICAgY2hhbm5lbDogY2hhbm5lbCxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBvbGwoY2hhbm5lbCkge1xuICBpZiAoY2hhbm5lbC5jbG9zZWQpIHtcbiAgICByZXR1cm4gTk9fVkFMVUU7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gY2hhbm5lbC5fdGFrZShuZXcgRm5IYW5kbGVyKGZhbHNlKSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBOT19WQUxVRTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZmZlcihjaGFubmVsLCB2YWx1ZSkge1xuICBpZiAoY2hhbm5lbC5jbG9zZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gY2hhbm5lbC5fcHV0KHZhbHVlLCBuZXcgRm5IYW5kbGVyKGZhbHNlKSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2xlZXAobXNlY3MpIHtcbiAgcmV0dXJuIG5ldyBJbnN0cnVjdGlvbihTTEVFUCwgbXNlY3MpO1xufVxuXG5mdW5jdGlvbiBhbHRzKG9wZXJhdGlvbnMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBJbnN0cnVjdGlvbihBTFRTLCB7XG4gICAgb3BlcmF0aW9uczogb3BlcmF0aW9ucyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH0pO1xufVxuXG5leHBvcnRzLnB1dF90aGVuX2NhbGxiYWNrID0gcHV0X3RoZW5fY2FsbGJhY2s7XG5leHBvcnRzLnRha2VfdGhlbl9jYWxsYmFjayA9IHRha2VfdGhlbl9jYWxsYmFjaztcbmV4cG9ydHMucHV0ID0gcHV0O1xuZXhwb3J0cy50YWtlID0gdGFrZTtcbmV4cG9ydHMub2ZmZXIgPSBvZmZlcjtcbmV4cG9ydHMucG9sbCA9IHBvbGw7XG5leHBvcnRzLnNsZWVwID0gc2xlZXA7XG5leHBvcnRzLmFsdHMgPSBhbHRzO1xuZXhwb3J0cy5JbnN0cnVjdGlvbiA9IEluc3RydWN0aW9uO1xuZXhwb3J0cy5Qcm9jZXNzID0gUHJvY2VzcztcbmV4cG9ydHMuTk9fVkFMVUUgPSBOT19WQUxVRTtcbiJdfQ==