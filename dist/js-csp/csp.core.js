"use strict";

var buffers = require("./impl/buffers");
var channels = require("./impl/channels");
var select = require("./impl/select");
var process = require("./impl/process");
var timers = require("./impl/timers");

function spawn(gen, creator) {
  var ch = channels.chan(buffers.fixed(1));
  new process.Process(gen, function (value) {
    if (value === channels.CLOSED) {
      ch.close();
    } else {
      process.put_then_callback(ch, value, function (ok) {
        ch.close();
      });
    }
  }, creator).run();
  return ch;
};

function go(f, args) {
  args = args || [];

  var gen = f.apply(null, args);
  return spawn(gen, f);
};

function chan(bufferOrNumber, xform, exHandler) {
  var buf;
  if (bufferOrNumber === 0) {
    bufferOrNumber = null;
  }
  if (typeof bufferOrNumber === "number") {
    buf = buffers.fixed(bufferOrNumber);
  } else {
    buf = bufferOrNumber;
  }
  return channels.chan(buf, xform, exHandler);
};

module.exports = {
  buffers: {
    fixed: buffers.fixed,
    dropping: buffers.dropping,
    sliding: buffers.sliding
  },

  spawn: spawn,
  go: go,
  chan: chan,
  DEFAULT: select.DEFAULT,
  CLOSED: channels.CLOSED,

  put: process.put,
  take: process.take,
  offer: process.offer,
  poll: process.poll,
  sleep: process.sleep,
  alts: process.alts,
  putAsync: process.put_then_callback,
  takeAsync: process.take_then_callback,
  NO_VALUE: process.NO_VALUE,

  timeout: timers.timeout
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3RtcC9qcy1jc3AvY3NwLmNvcmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3hDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzFDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN0QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN4QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRXRDLFNBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7QUFDM0IsTUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekMsQUFBQyxNQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVMsS0FBSyxFQUFFO0FBQ3hDLFFBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDN0IsUUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ1osTUFBTTtBQUNMLGFBQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVMsRUFBRSxFQUFFO0FBQ2hELFVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztPQUNaLENBQUMsQ0FBQztLQUNKO0dBQ0YsRUFBRSxPQUFPLENBQUMsQ0FBRSxHQUFHLEVBQUUsQ0FBQztBQUNuQixTQUFPLEVBQUUsQ0FBQztDQUNYLENBQUM7O0FBRUYsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRTtBQUNuQixNQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQzs7QUFFbEIsTUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsU0FBTyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ3RCLENBQUM7O0FBRUYsU0FBUyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDOUMsTUFBSSxHQUFHLENBQUM7QUFDUixNQUFJLGNBQWMsS0FBSyxDQUFDLEVBQUU7QUFDeEIsa0JBQWMsR0FBRyxJQUFJLENBQUM7R0FDdkI7QUFDRCxNQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsRUFBRTtBQUN0QyxPQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUNyQyxNQUFNO0FBQ0wsT0FBRyxHQUFHLGNBQWMsQ0FBQztHQUN0QjtBQUNELFNBQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQzdDLENBQUM7O0FBR0YsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLFNBQU8sRUFBRTtBQUNQLFNBQUssRUFBRSxPQUFPLENBQUMsS0FBSztBQUNwQixZQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7QUFDMUIsV0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0dBQ3pCOztBQUVELE9BQUssRUFBRSxLQUFLO0FBQ1osSUFBRSxFQUFFLEVBQUU7QUFDTixNQUFJLEVBQUUsSUFBSTtBQUNWLFNBQU8sRUFBRSxNQUFNLENBQUMsT0FBTztBQUN2QixRQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU07O0FBRXZCLEtBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztBQUNoQixNQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7QUFDbEIsT0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO0FBQ3BCLE1BQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUNsQixPQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7QUFDcEIsTUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0FBQ2xCLFVBQVEsRUFBRSxPQUFPLENBQUMsaUJBQWlCO0FBQ25DLFdBQVMsRUFBRSxPQUFPLENBQUMsa0JBQWtCO0FBQ3JDLFVBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTs7QUFFMUIsU0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO0NBQ3hCLENBQUMiLCJmaWxlIjoiY3NwLmNvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGJ1ZmZlcnMgPSByZXF1aXJlKFwiLi9pbXBsL2J1ZmZlcnNcIik7XG52YXIgY2hhbm5lbHMgPSByZXF1aXJlKFwiLi9pbXBsL2NoYW5uZWxzXCIpO1xudmFyIHNlbGVjdCA9IHJlcXVpcmUoXCIuL2ltcGwvc2VsZWN0XCIpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKFwiLi9pbXBsL3Byb2Nlc3NcIik7XG52YXIgdGltZXJzID0gcmVxdWlyZShcIi4vaW1wbC90aW1lcnNcIik7XG5cbmZ1bmN0aW9uIHNwYXduKGdlbiwgY3JlYXRvcikge1xuICB2YXIgY2ggPSBjaGFubmVscy5jaGFuKGJ1ZmZlcnMuZml4ZWQoMSkpO1xuICAobmV3IHByb2Nlc3MuUHJvY2VzcyhnZW4sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBjaGFubmVscy5DTE9TRUQpIHtcbiAgICAgIGNoLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MucHV0X3RoZW5fY2FsbGJhY2soY2gsIHZhbHVlLCBmdW5jdGlvbihvaykge1xuICAgICAgICBjaC5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBjcmVhdG9yKSkucnVuKCk7XG4gIHJldHVybiBjaDtcbn07XG5cbmZ1bmN0aW9uIGdvKGYsIGFyZ3MpIHtcbiAgYXJncyA9IGFyZ3MgfHwgW107XG5cbiAgdmFyIGdlbiA9IGYuYXBwbHkobnVsbCwgYXJncyk7XG4gIHJldHVybiBzcGF3bihnZW4sIGYpO1xufTtcblxuZnVuY3Rpb24gY2hhbihidWZmZXJPck51bWJlciwgeGZvcm0sIGV4SGFuZGxlcikge1xuICB2YXIgYnVmO1xuICBpZiAoYnVmZmVyT3JOdW1iZXIgPT09IDApIHtcbiAgICBidWZmZXJPck51bWJlciA9IG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXJPck51bWJlciA9PT0gXCJudW1iZXJcIikge1xuICAgIGJ1ZiA9IGJ1ZmZlcnMuZml4ZWQoYnVmZmVyT3JOdW1iZXIpO1xuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IGJ1ZmZlck9yTnVtYmVyO1xuICB9XG4gIHJldHVybiBjaGFubmVscy5jaGFuKGJ1ZiwgeGZvcm0sIGV4SGFuZGxlcik7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBidWZmZXJzOiB7XG4gICAgZml4ZWQ6IGJ1ZmZlcnMuZml4ZWQsXG4gICAgZHJvcHBpbmc6IGJ1ZmZlcnMuZHJvcHBpbmcsXG4gICAgc2xpZGluZzogYnVmZmVycy5zbGlkaW5nXG4gIH0sXG5cbiAgc3Bhd246IHNwYXduLFxuICBnbzogZ28sXG4gIGNoYW46IGNoYW4sXG4gIERFRkFVTFQ6IHNlbGVjdC5ERUZBVUxULFxuICBDTE9TRUQ6IGNoYW5uZWxzLkNMT1NFRCxcblxuICBwdXQ6IHByb2Nlc3MucHV0LFxuICB0YWtlOiBwcm9jZXNzLnRha2UsXG4gIG9mZmVyOiBwcm9jZXNzLm9mZmVyLFxuICBwb2xsOiBwcm9jZXNzLnBvbGwsXG4gIHNsZWVwOiBwcm9jZXNzLnNsZWVwLFxuICBhbHRzOiBwcm9jZXNzLmFsdHMsXG4gIHB1dEFzeW5jOiBwcm9jZXNzLnB1dF90aGVuX2NhbGxiYWNrLFxuICB0YWtlQXN5bmM6IHByb2Nlc3MudGFrZV90aGVuX2NhbGxiYWNrLFxuICBOT19WQUxVRTogcHJvY2Vzcy5OT19WQUxVRSxcblxuICB0aW1lb3V0OiB0aW1lcnMudGltZW91dFxufTtcbiJdfQ==